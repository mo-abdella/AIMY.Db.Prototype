// <auto-generated />
using System;
using System.Collections.Generic;
using AIMY.Db.Prototype.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AIMY.Db.Prototype.Infrastructure.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20250530133332_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.AnalysisRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnalysisRuleId")
                        .HasColumnType("integer")
                        .HasColumnName("analysis_rule_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<string>("RuleInteractionType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("rule_interaction_type");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.Property<decimal?>("Weight")
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("analysis_rules_pkey");

                    b.HasIndex(new[] { "AnalysisRuleId" }, "idx_analysis_rule_id");

                    b.HasIndex(new[] { "Name" }, "idx_analysis_rules_name");

                    b.HasIndex(new[] { "ProductId" }, "idx_analysis_rules_product_id");

                    b.ToTable("analysis_rules", "rule");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.AnalysisRuleProduct", b =>
                {
                    b.Property<int>("AnalysisRuleId")
                        .HasColumnType("integer")
                        .HasColumnName("analysis_rule_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("AnalysisRuleId", "ProductId")
                        .HasName("pk_analysis_rule_product");

                    b.HasIndex(new[] { "ProductId" }, "idx_analysis_rule_product_product_id");

                    b.ToTable("analysis_rule_product", "rule");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("ReceivedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("received_by");

                    b.Property<string>("SentBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("sent_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserInteractionId")
                        .HasColumnType("integer")
                        .HasColumnName("user_interaction_id");

                    b.HasKey("Id")
                        .HasName("chat_messages_pkey");

                    b.HasIndex(new[] { "UserInteractionId" }, "idx_messages_user_interaction_id");

                    b.ToTable("chat_messages", "interaction");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer")
                        .HasColumnName("organization_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("clients_pkey");

                    b.HasIndex(new[] { "Key", "OrganizationId" }, "clients_key_organization_id_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Name", "OrganizationId" }, "clients_name_organization_id_key")
                        .IsUnique();

                    b.HasIndex(new[] { "OrganizationId" }, "idx_clients_organization_id");

                    b.ToTable("clients", "product");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.ExpectedOutput", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnalysisRuleId")
                        .HasColumnType("integer")
                        .HasColumnName("analysis_rule_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("OutputType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("output_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("expected_outputs_pkey");

                    b.HasIndex(new[] { "AnalysisRuleId" }, "idx_expected_outputs_analysis_rule_id");

                    b.HasIndex(new[] { "Name" }, "idx_expected_outputs_name");

                    b.ToTable("expected_outputs", "rule");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.FlywaySchemaHistory", b =>
                {
                    b.Property<int>("InstalledRank")
                        .HasColumnType("integer")
                        .HasColumnName("installed_rank");

                    b.Property<int?>("Checksum")
                        .HasColumnType("integer")
                        .HasColumnName("checksum");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<int>("ExecutionTime")
                        .HasColumnType("integer")
                        .HasColumnName("execution_time");

                    b.Property<string>("InstalledBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("installed_by");

                    b.Property<DateTime>("InstalledOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("installed_on")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Script")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("script");

                    b.Property<bool>("Success")
                        .HasColumnType("boolean")
                        .HasColumnName("success");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("type");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("version");

                    b.HasKey("InstalledRank")
                        .HasName("flyway_schema_history_pk");

                    b.HasIndex(new[] { "Success" }, "flyway_schema_history_s_idx");

                    b.ToTable("flyway_schema_history", "events");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.InteractionAnalysisRuleResult", b =>
                {
                    b.Property<int>("UserInteractionId")
                        .HasColumnType("integer")
                        .HasColumnName("user_interaction_id");

                    b.Property<int>("AnalysisRuleId")
                        .HasColumnType("integer")
                        .HasColumnName("analysis_rule_id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("QaReview")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("qa_review");

                    b.Property<decimal?>("QaScore")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("qa_score");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<decimal?>("Score")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("score");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("UserInteractionId", "AnalysisRuleId")
                        .HasName("interaction_analysis_rule_results_pkey");

                    b.HasIndex(new[] { "AnalysisRuleId" }, "idx_interaction_analysis_rule_results_analysis_rule_id");

                    b.HasIndex(new[] { "Type" }, "idx_interaction_analysis_rule_results_type");

                    b.HasIndex(new[] { "UserInteractionId" }, "idx_interaction_analysis_rule_results_user_interaction_id");

                    b.ToTable("interaction_analysis_rule_results", "rule");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.InteractionExpectedOutputResult", b =>
                {
                    b.Property<int>("UserInteractionId")
                        .HasColumnType("integer")
                        .HasColumnName("user_interaction_id");

                    b.Property<int>("ExpectedOutputId")
                        .HasColumnType("integer")
                        .HasColumnName("expected_output_id");

                    b.Property<bool?>("AiOrQa")
                        .HasColumnType("boolean")
                        .HasColumnName("ai_or_qa");

                    b.Property<bool?>("BooleanOutput")
                        .HasColumnType("boolean")
                        .HasColumnName("boolean_output");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<decimal?>("NumberOutput")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("number_output");

                    b.Property<string>("OutputType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .HasColumnName("output_type")
                        .IsFixedLength();

                    b.Property<string>("TextOutput")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("text_output");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("UserInteractionId", "ExpectedOutputId")
                        .HasName("pk_interaction_expected_output_results");

                    b.HasIndex("ExpectedOutputId");

                    b.HasIndex(new[] { "UserInteractionId", "ExpectedOutputId" }, "idx_interaction_expected_output_results_composite");

                    b.HasIndex(new[] { "OutputType" }, "idx_interaction_expected_output_results_type");

                    b.ToTable("interaction_expected_output_results", "rule");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.InteractionReport", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("ActionTaken")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("action_taken");

                    b.Property<string>("IssueReported")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("issue_reported");

                    b.HasKey("Id")
                        .HasName("interaction_report_pkey");

                    b.ToTable("interaction_report", "interaction");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("LastRunTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_run_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<string>("ResultMessage")
                        .HasColumnType("text")
                        .HasColumnName("result_message");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int?>("ToolId")
                        .HasColumnType("integer")
                        .HasColumnName("tool_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_jobs");

                    b.HasIndex(new[] { "ProductId" }, "ix_jobs_product_id");

                    b.HasIndex(new[] { "ToolId" }, "ix_jobs_tool_id");

                    b.ToTable("jobs", "job");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("organizations_pkey");

                    b.HasIndex(new[] { "Key" }, "organizations_key_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "organizations_name_key")
                        .IsUnique();

                    b.ToTable("organizations", "product");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("products_pkey");

                    b.HasIndex(new[] { "ClientId" }, "idx_products_client_id");

                    b.HasIndex(new[] { "Key", "ClientId" }, "products_key_client_id_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Name", "ClientId" }, "products_name_client_id_key")
                        .IsUnique();

                    b.ToTable("products", "product");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.ProductTool", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<int>("ToolId")
                        .HasColumnType("integer")
                        .HasColumnName("tool_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("ProductId", "ToolId")
                        .HasName("pk_product_tool");

                    b.HasIndex(new[] { "ToolId" }, "idx_product_tool_tool_id");

                    b.ToTable("product_tool", "product");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.ProductUser", b =>
                {
                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer")
                        .HasColumnName("organization_id");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("OrganizationId", "ClientId", "ProductId", "UserId")
                        .HasName("product_user_pkey");

                    b.HasIndex("ProductId");

                    b.HasIndex(new[] { "ClientId" }, "idx_product_user_client_id");

                    b.HasIndex(new[] { "OrganizationId" }, "idx_product_user_organization_id");

                    b.HasIndex(new[] { "UserId" }, "idx_product_user_user_id");

                    b.ToTable("product_user", "product");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("roles_pkey");

                    b.HasIndex(new[] { "Name" }, "roles_name_key")
                        .IsUnique();

                    b.ToTable("roles", "auth");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.TeamSupportTicket", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<string>("CallerField")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("caller_field");

                    b.Property<string>("CreatorName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("creator_name");

                    b.Property<string>("ProductName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("product_name");

                    b.Property<double?>("TimeSpent")
                        .HasColumnType("double precision")
                        .HasColumnName("time_spent");

                    b.HasKey("Id")
                        .HasName("pk_team_support_tickets");

                    b.ToTable("team_support_tickets", "interaction");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.TicketAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("jsonb")
                        .HasColumnName("attachments");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("HtmlBody")
                        .HasColumnType("text")
                        .HasColumnName("html_body");

                    b.Property<bool?>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_public");

                    b.Property<DateTime?>("TakenAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("taken_at");

                    b.Property<string>("TakenBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("taken_by");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserInteractionId")
                        .HasColumnType("integer")
                        .HasColumnName("user_interaction_id");

                    b.HasKey("Id")
                        .HasName("ticket_actions_pkey");

                    b.HasIndex(new[] { "UserInteractionId" }, "idx_actions_user_interaction_id");

                    b.ToTable("ticket_actions", "interaction");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.TicketHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("UserInteractionId")
                        .HasColumnType("integer")
                        .HasColumnName("user_interaction_id");

                    b.HasKey("Id")
                        .HasName("ticket_history_pkey");

                    b.HasIndex(new[] { "UserInteractionId" }, "IX_ticket_history_user_interaction_id");

                    b.ToTable("ticket_history", "interaction");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("access_type")
                        .HasDefaultValueSql("'api'::character varying");

                    b.Property<string>("ApiKey")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("api_key");

                    b.Property<byte[]>("ApiSecret")
                        .HasColumnType("bytea")
                        .HasColumnName("api_secret");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.Property<string>("Url")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("tools_pkey");

                    b.HasIndex(new[] { "AccessType" }, "idx_access_type");

                    b.HasIndex(new[] { "ProductId" }, "idx_tools_product_id");

                    b.HasIndex(new[] { "Name", "ProductId" }, "tools_name_product_id_key")
                        .IsUnique();

                    b.ToTable("tools", "product");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<int?>("SupervisorId")
                        .HasColumnType("integer")
                        .HasColumnName("supervisor_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "Email" }, "idx_users_email");

                    b.HasIndex(new[] { "SupervisorId" }, "idx_users_supervisor_id");

                    b.HasIndex(new[] { "Email" }, "users_email_key")
                        .IsUnique();

                    b.ToTable("users", "auth");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.UserInteraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AgentEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("agent_email");

                    b.Property<int?>("AgentId")
                        .HasColumnType("integer")
                        .HasColumnName("agent_id");

                    b.Property<string>("CallDirection")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("call_direction");

                    b.Property<int?>("CallDuration")
                        .HasColumnType("integer")
                        .HasColumnName("call_duration");

                    b.Property<int?>("CallHoldDuration")
                        .HasColumnType("integer")
                        .HasColumnName("call_hold_duration");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("ExternalDateClosed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("external_date_closed");

                    b.Property<DateTime?>("ExternalDateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("external_date_created");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("external_id");

                    b.Property<string>("ExternalStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("external_status")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<long?>("FirstResponseTimeTaken")
                        .HasColumnType("bigint")
                        .HasColumnName("first_response_time_taken");

                    b.Property<string>("InteractionType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("interaction_type");

                    b.Property<decimal?>("MistakeAnalysisScoreAi")
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)")
                        .HasColumnName("mistake_analysis_score_ai");

                    b.Property<decimal?>("MistakeAnalysisScoreQa")
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)")
                        .HasColumnName("mistake_analysis_score_qa");

                    b.Property<string>("SemanticAnalysisAi")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("semantic_analysis_ai");

                    b.Property<string>("SemanticAnalysisQa")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("semantic_analysis_qa");

                    b.Property<decimal?>("SentimentAnalysisScoreAi")
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)")
                        .HasColumnName("sentiment_analysis_score_ai");

                    b.Property<decimal?>("SentimentAnalysisScoreQa")
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)")
                        .HasColumnName("sentiment_analysis_score_qa");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("TextContent")
                        .HasColumnType("text")
                        .HasColumnName("text_content");

                    b.Property<string>("TicketDescription")
                        .HasColumnType("text")
                        .HasColumnName("ticket_description");

                    b.Property<string>("TicketGroup")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ticket_group")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("TicketNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ticket_number");

                    b.Property<List<string>>("TicketTags")
                        .HasColumnType("text[]")
                        .HasColumnName("ticket_tags");

                    b.Property<string>("TicketTitle")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ticket_title");

                    b.Property<string>("TicketTypeName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ticket_type_name")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<int>("ToolId")
                        .HasColumnType("integer")
                        .HasColumnName("tool_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("user_interactions_pkey");

                    b.HasIndex(new[] { "AgentId" }, "idx_agent_id");

                    b.HasIndex(new[] { "InteractionType" }, "idx_interaction_type");

                    b.HasIndex(new[] { "ToolId" }, "idx_tool_id");

                    b.ToTable("user_interactions", "interaction");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.UserInteractionEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("OperationName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("operation_name");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("service_name");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserInteractionId")
                        .HasColumnType("integer")
                        .HasColumnName("user_interaction_id");

                    b.HasKey("Id")
                        .HasName("user_interaction_events_pkey");

                    b.HasIndex(new[] { "UserInteractionId" }, "idx_user_interaction_events_interaction_id");

                    b.ToTable("user_interaction_events", "events");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("UserId", "RoleId")
                        .HasName("user_role_pkey");

                    b.HasIndex("RoleId");

                    b.ToTable("user_role", "auth");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.ZendeskTicket", b =>
                {
                    b.Property<long>("TicketId")
                        .HasColumnType("bigint")
                        .HasColumnName("ticket_id");

                    b.Property<string>("Assignee")
                        .HasColumnType("text")
                        .HasColumnName("assignee");

                    b.Property<string>("Channel")
                        .HasColumnType("text")
                        .HasColumnName("channel");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long?>("FirstResponseTimeTaken")
                        .HasColumnType("bigint")
                        .HasColumnName("first_response_time_taken");

                    b.Property<DateTime?>("GeneratedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("generated_timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("InternalStatus")
                        .HasColumnType("text")
                        .HasColumnName("internal_status");

                    b.Property<long?>("JiraTicketId")
                        .HasColumnType("bigint")
                        .HasColumnName("jira_ticket_id");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnName("organization_id");

                    b.Property<string>("Priority")
                        .HasColumnType("text")
                        .HasColumnName("priority");

                    b.Property<string>("PublicStatus")
                        .HasColumnType("text")
                        .HasColumnName("public_status");

                    b.Property<long?>("RequesterId")
                        .HasColumnType("bigint")
                        .HasColumnName("requester_id");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<long?>("SubmitterId")
                        .HasColumnType("bigint")
                        .HasColumnName("submitter_id");

                    b.Property<List<string>>("Tags")
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.Property<string>("TicketGroup")
                        .HasColumnType("text")
                        .HasColumnName("ticket_group");

                    b.Property<long?>("TimeSpent")
                        .HasColumnType("bigint")
                        .HasColumnName("time_spent");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<int?>("UserInteractionId")
                        .HasColumnType("integer")
                        .HasColumnName("user_interaction_id");

                    b.HasKey("TicketId")
                        .HasName("zendesk_tickets_pkey");

                    b.HasIndex("UserInteractionId");

                    b.ToTable("zendesk_tickets", "interaction");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.AnalysisRule", b =>
                {
                    b.HasOne("AIMY.Db.Prototype.Infrastructure.Entities.AnalysisRule", "AnalysisRuleNavigation")
                        .WithMany("InverseAnalysisRuleNavigation")
                        .HasForeignKey("AnalysisRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("analysis_rules_analysis_rule_id_fkey");

                    b.HasOne("AIMY.Db.Prototype.Infrastructure.Entities.Product", "Product")
                        .WithMany("AnalysisRules")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_analysis_rules_products_product_id");

                    b.Navigation("AnalysisRuleNavigation");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.AnalysisRuleProduct", b =>
                {
                    b.HasOne("AIMY.Db.Prototype.Infrastructure.Entities.AnalysisRule", "AnalysisRule")
                        .WithMany("AnalysisRuleProducts")
                        .HasForeignKey("AnalysisRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_analysis_rule_product_analysis_rules_analysis_rule_id");

                    b.HasOne("AIMY.Db.Prototype.Infrastructure.Entities.Product", "Product")
                        .WithMany("AnalysisRuleProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_analysis_rule_product_products_product_id");

                    b.Navigation("AnalysisRule");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.ChatMessage", b =>
                {
                    b.HasOne("AIMY.Db.Prototype.Infrastructure.Entities.UserInteraction", "UserInteraction")
                        .WithMany("ChatMessages")
                        .HasForeignKey("UserInteractionId")
                        .IsRequired()
                        .HasConstraintName("chat_messages_user_interaction_id_fkey");

                    b.Navigation("UserInteraction");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.Client", b =>
                {
                    b.HasOne("AIMY.Db.Prototype.Infrastructure.Entities.Organization", "Organization")
                        .WithMany("Clients")
                        .HasForeignKey("OrganizationId")
                        .IsRequired()
                        .HasConstraintName("clients_organization_id_fkey");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.ExpectedOutput", b =>
                {
                    b.HasOne("AIMY.Db.Prototype.Infrastructure.Entities.AnalysisRule", "AnalysisRule")
                        .WithMany("ExpectedOutputs")
                        .HasForeignKey("AnalysisRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("expected_outputs_analysis_rule_id_fkey");

                    b.Navigation("AnalysisRule");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.InteractionAnalysisRuleResult", b =>
                {
                    b.HasOne("AIMY.Db.Prototype.Infrastructure.Entities.AnalysisRule", "AnalysisRule")
                        .WithMany("InteractionAnalysisRuleResults")
                        .HasForeignKey("AnalysisRuleId")
                        .IsRequired()
                        .HasConstraintName("interaction_analysis_rule_results_analysis_rule_id_fkey");

                    b.HasOne("AIMY.Db.Prototype.Infrastructure.Entities.UserInteraction", "UserInteraction")
                        .WithMany("InteractionAnalysisRuleResults")
                        .HasForeignKey("UserInteractionId")
                        .IsRequired()
                        .HasConstraintName("interaction_analysis_rule_results_user_interaction_id_fkey");

                    b.Navigation("AnalysisRule");

                    b.Navigation("UserInteraction");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.InteractionExpectedOutputResult", b =>
                {
                    b.HasOne("AIMY.Db.Prototype.Infrastructure.Entities.ExpectedOutput", "ExpectedOutput")
                        .WithMany("InteractionExpectedOutputResults")
                        .HasForeignKey("ExpectedOutputId")
                        .IsRequired()
                        .HasConstraintName("interaction_expected_output_results_expected_output_id_fkey");

                    b.HasOne("AIMY.Db.Prototype.Infrastructure.Entities.UserInteraction", "UserInteraction")
                        .WithMany("InteractionExpectedOutputResults")
                        .HasForeignKey("UserInteractionId")
                        .IsRequired()
                        .HasConstraintName("interaction_expected_output_results_user_interaction_id_fkey");

                    b.Navigation("ExpectedOutput");

                    b.Navigation("UserInteraction");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.InteractionReport", b =>
                {
                    b.HasOne("AIMY.Db.Prototype.Infrastructure.Entities.UserInteraction", "IdNavigation")
                        .WithOne("InteractionReport")
                        .HasForeignKey("AIMY.Db.Prototype.Infrastructure.Entities.InteractionReport", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_interaction_report_user_interactions_id");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.Job", b =>
                {
                    b.HasOne("AIMY.Db.Prototype.Infrastructure.Entities.Product", "Product")
                        .WithMany("Jobs")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_jobs_products_product_id");

                    b.HasOne("AIMY.Db.Prototype.Infrastructure.Entities.Tool", "Tool")
                        .WithMany("Jobs")
                        .HasForeignKey("ToolId")
                        .HasConstraintName("fk_jobs_tools_tool_id");

                    b.Navigation("Product");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.Product", b =>
                {
                    b.HasOne("AIMY.Db.Prototype.Infrastructure.Entities.Client", "Client")
                        .WithMany("Products")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("products_client_id_fkey");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.ProductTool", b =>
                {
                    b.HasOne("AIMY.Db.Prototype.Infrastructure.Entities.Product", "Product")
                        .WithMany("ProductTools")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_tool_products_product_id");

                    b.HasOne("AIMY.Db.Prototype.Infrastructure.Entities.Tool", "Tool")
                        .WithMany("ProductTools")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_tool_tools_tool_id");

                    b.Navigation("Product");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.ProductUser", b =>
                {
                    b.HasOne("AIMY.Db.Prototype.Infrastructure.Entities.Client", "Client")
                        .WithMany("ProductUsers")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("fk_product_user_clients_client_id");

                    b.HasOne("AIMY.Db.Prototype.Infrastructure.Entities.Organization", "Organization")
                        .WithMany("ProductUsers")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_user_organizations_organization_id");

                    b.HasOne("AIMY.Db.Prototype.Infrastructure.Entities.Product", "Product")
                        .WithMany("ProductUsers")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("product_user_product_id_fkey");

                    b.HasOne("AIMY.Db.Prototype.Infrastructure.Entities.User", "User")
                        .WithMany("ProductUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("product_user_user_id_fkey");

                    b.Navigation("Client");

                    b.Navigation("Organization");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.TeamSupportTicket", b =>
                {
                    b.HasOne("AIMY.Db.Prototype.Infrastructure.Entities.UserInteraction", "IdNavigation")
                        .WithOne("TeamSupportTicket")
                        .HasForeignKey("AIMY.Db.Prototype.Infrastructure.Entities.TeamSupportTicket", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_support_tickets_user_interactions_id");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.TicketAction", b =>
                {
                    b.HasOne("AIMY.Db.Prototype.Infrastructure.Entities.UserInteraction", "UserInteraction")
                        .WithMany("TicketActions")
                        .HasForeignKey("UserInteractionId")
                        .IsRequired()
                        .HasConstraintName("ticket_actions_user_interaction_id_fkey");

                    b.Navigation("UserInteraction");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.TicketHistory", b =>
                {
                    b.HasOne("AIMY.Db.Prototype.Infrastructure.Entities.UserInteraction", "UserInteraction")
                        .WithMany("TicketHistories")
                        .HasForeignKey("UserInteractionId")
                        .IsRequired()
                        .HasConstraintName("ticket_history_user_interaction_id_fkey");

                    b.Navigation("UserInteraction");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.User", b =>
                {
                    b.HasOne("AIMY.Db.Prototype.Infrastructure.Entities.User", "Supervisor")
                        .WithMany("InverseSupervisor")
                        .HasForeignKey("SupervisorId")
                        .HasConstraintName("users_supervisor_id_fkey");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.UserInteraction", b =>
                {
                    b.HasOne("AIMY.Db.Prototype.Infrastructure.Entities.Tool", "Tool")
                        .WithMany("UserInteractions")
                        .HasForeignKey("ToolId")
                        .IsRequired()
                        .HasConstraintName("user_interactions_tool_id_fkey");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.UserInteractionEvent", b =>
                {
                    b.HasOne("AIMY.Db.Prototype.Infrastructure.Entities.UserInteraction", "UserInteraction")
                        .WithMany("UserInteractionEvents")
                        .HasForeignKey("UserInteractionId")
                        .IsRequired()
                        .HasConstraintName("user_interaction_events_user_interaction_id_fkey");

                    b.Navigation("UserInteraction");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.UserRole", b =>
                {
                    b.HasOne("AIMY.Db.Prototype.Infrastructure.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("user_role_role_id_fkey");

                    b.HasOne("AIMY.Db.Prototype.Infrastructure.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("user_role_user_id_fkey");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.ZendeskTicket", b =>
                {
                    b.HasOne("AIMY.Db.Prototype.Infrastructure.Entities.UserInteraction", "UserInteraction")
                        .WithMany("ZendeskTickets")
                        .HasForeignKey("UserInteractionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_zendesk_ticket_user_interaction");

                    b.Navigation("UserInteraction");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.AnalysisRule", b =>
                {
                    b.Navigation("AnalysisRuleProducts");

                    b.Navigation("ExpectedOutputs");

                    b.Navigation("InteractionAnalysisRuleResults");

                    b.Navigation("InverseAnalysisRuleNavigation");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.Client", b =>
                {
                    b.Navigation("ProductUsers");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.ExpectedOutput", b =>
                {
                    b.Navigation("InteractionExpectedOutputResults");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.Organization", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("ProductUsers");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.Product", b =>
                {
                    b.Navigation("AnalysisRuleProducts");

                    b.Navigation("AnalysisRules");

                    b.Navigation("Jobs");

                    b.Navigation("ProductTools");

                    b.Navigation("ProductUsers");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.Tool", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("ProductTools");

                    b.Navigation("UserInteractions");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.User", b =>
                {
                    b.Navigation("InverseSupervisor");

                    b.Navigation("ProductUsers");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AIMY.Db.Prototype.Infrastructure.Entities.UserInteraction", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("InteractionAnalysisRuleResults");

                    b.Navigation("InteractionExpectedOutputResults");

                    b.Navigation("InteractionReport");

                    b.Navigation("TeamSupportTicket");

                    b.Navigation("TicketActions");

                    b.Navigation("TicketHistories");

                    b.Navigation("UserInteractionEvents");

                    b.Navigation("ZendeskTickets");
                });
#pragma warning restore 612, 618
        }
    }
}
